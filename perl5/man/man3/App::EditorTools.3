.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::EditorTools 3"
.TH App::EditorTools 3 "2013-10-24" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::EditorTools \- Command line tool for Perl code refactoring
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`App::EditorTools\*(C'\fR provides the \f(CW\*(C`editortools\*(C'\fR command line program that
enables programming editors (Vim, Emacs, etc.) to take advantage of some
sophisticated Perl refactoring tools. The tools utilize \s-1PPI\s0 to analyze
Perl code and make intelligent changes. As of this release, \f(CW\*(C`editortools\*(C'\fR 
is able to:
.IP "\(bu" 4
Lexically Rename a Variable
.IP "\(bu" 4
Introduce a Temporary Variable
.IP "\(bu" 4
Rename the Package Based on the Path of the File
.PP
More refactoring tools are expected to be added in the future.
.SH "BACKGROUND"
.IX Header "BACKGROUND"
The Padre Perl editor team developed some very interesting \s-1PPI\s0 based
refactoring tools for their editor. Working with the Padre team, those
routines were abstracted into PPIx::EditorTools in order to make them 
available to alternative editors.
.PP
The initial implementation was developed for Vim. Pat Regan contributed
the emacs bindings. Other editor bindings are encouraged/welcome.
.SH "REFACTORINGS"
.IX Header "REFACTORINGS"
The following lists the refactoring routines that are currently supported.
Please see App::EditorTools::Vim or App::EditorTools::Emacs to
learn how to install the bindings and the short cuts to use within your
editor. The command line interface should only be needed to develop the
editor bindings.
.PP
Each command expects the Perl program being edited to be piped in via
\&\s-1STDIN.\s0 The refactored code is output on \s-1STDOUT.\s0
.IP "RenameVariable" 4
.IX Item "RenameVariable"
.Vb 1
\&    editortools renamevariable \-c col \-l line \-r newvar
.Ve
.Sp
Renames the variable at column \f(CW\*(C`col\*(C'\fR and line \f(CW\*(C`line\*(C'\fR to \f(CW\*(C`newvar\*(C'\fR. Unlike
editors typical find and replace, this is aware of lexical scope and only
renames those variables within same scope. For example, given:
.Sp
.Vb 5
\&    my $x = \*(Aqtext\*(Aq;
\&    for my $x (1..3){
\&        print $x;
\&    }
\&    print $x;
.Ve
.Sp
The command \f(CW\*(C`editortools renamevariable \-c 3 \-l 12 \-r counter\*(C'\fR will result in:
.Sp
.Vb 5
\&    my $x = \*(Aqtext\*(Aq;
\&    for my $counter (1..3){
\&        print $counter;
\&    }
\&    print $x;
.Ve
.IP "IntroduceTemporaryVariable" 4
.IX Item "IntroduceTemporaryVariable"
.Vb 1
\&    editortools introducetemporaryvariable \-s line1,col1 \-e line2,col2 \-v varname
.Ve
.Sp
Removes the expression between line1,col1 and line2,col2 and replaces it
with the temporary variable \f(CW\*(C`varname\*(C'\fR. For example, given:
.Sp
.Vb 2
\&    my $x = 1 + (10 / 12) + 15;
\&    my $y = 3 + (10 / 12) + 17;
.Ve
.Sp
The command \f(CW\*(C`editortools introducetemporaryvariable \-s 1,13 \-e 1,21 \-v foo\*(C'\fR 
will yield:
.Sp
.Vb 3
\&    my $foo = (10 / 12);
\&    my $x = 1 + $foo + 15;
\&    my $y = 3 + $foo + 17;
.Ve
.IP "RenamePackageFromPath" 4
.IX Item "RenamePackageFromPath"
.Vb 1
\&    editortools renamepackagefrompath \-f filename
.Ve
.Sp
Change the \f(CW\*(C`package\*(C'\fR declaration in the current file to reflect \f(CW\*(C`filename\*(C'\fR.
Typically this is used when you want to rename a module. Move the module to a
new location and pass the new filename to the \f(CW\*(C`editortools\*(C'\fR command.  For
example, if you are editing \f(CW\*(C`lib/App/EditorTools.pm\*(C'\fR the package declaration
will be changed to \f(CW\*(C`package App::EditorTools;\*(C'\fR. At the moment there must be a
valid package declaration in the file for this to work.
.Sp
If the \f(CW\*(C`filename\*(C'\fR is a file that exists in the system, then
\&\f(CW\*(C`renamepackagefrompath\*(C'\fR will attempt to resolve any symlinks. This allows us
work on files under a symlink (ie, M@ \-> lib/App/Model), but rename them
correctly.
.IP "RenamePackage" 4
.IX Item "RenamePackage"
.Vb 1
\&    editortools renamepackage \-n Package::Name
.Ve
.Sp
Change the \f(CW\*(C`package\*(C'\fR declaration in the current file to Package::Name.  At the
moment there must be a valid package declaration in the file for this to work.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://code\-and\-hacks.blogspot.com/2009/07/stealing\-from\-padre\-for\-vim\-part\-3.html>,
PPIx::EditorTools, Padre
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or suggestions at 
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=App\-EditorTools>
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Grimes, <mgrimes@cpan.org>
.PP
Bug fixes and contributions from:
.IP "\(bu" 4
Shlomi Fish
.IP "\(bu" 4
Pat Regan (emacs interface)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Mark Grimes
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.
