.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PortState 3"
.TH PortState 3 "2005-08-26" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::PortState \- Perl extension for checking the open or closed status of a port.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   use strict;
\&   use warnings;
\&   use IO::Socket::PortState qw(check_ports);
\&
\&   my %porthash = ( ... );
\&
\&   check_ports($host,$timeout,\e%porthash);
\&
\&   for my $proto (keys %porthash) {
\&      for(keys %{ $porthash{$proto} }) {
\&         print "$proto $_ is not open ($porthash{$proto}\->{$_}\->{name}) if !$porthash{$proto}\->{$_}\->{open};
\&      }
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can use it to check if a port is open or closed for a given host and protocol.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default. But you can export \fIcheck_ports()\fR;
.SH "\fIcheck_ports()\fP"
.IX Header "check_ports()"
This function tests your \e%porthash and sets a protocol/port's open and note keys (see \e%porthash below for details).
.PP
By default it determines if \*(L"open\*(R" is 1 or 0 if the IO::Socket::INET object is defined or not. 
For protocols  not supported by IO::Socket::INET or for custom tests (\s-1IE\s0 open just to specific hosts, closed because activley blocked, service is down, etc)
use \e&handler (see \e&handler below)
.PP
.Vb 1
\&  check_ports($host,$timeout,\e%porthash,\e&handler);
.Ve
.PP
Called in void contect it modifies the hashref given. Otherwise it returns a new hash ref 
which is usefull for looping through the same \e%porthash for multiple hosts:
.PP
.Vb 6
\&  my %porthash = ( ... );
\&  for(@hosts) {
\&     my $host_hr = check_ports($_,$timeout,\e%porthash);
\&     print "Report for $_\en";
\&     # do something with $host_hr
\&  }
.Ve
.PP
vs void context:
.PP
.Vb 3
\&  my %porthash = ( ... );
\&  check_ports($host,$timeout,\e%porthash);
\&  # now %porthash has been directly changed
.Ve
.SS "\e%porthash"
.IX Subsection "%porthash"
This hash is a bit complex by necessity. (but its not so bad ;p)
.PP
The keys are the protocol (tcp, udp, ...) as can be used by IO::Socket::INET\->\fInew()\fR's \*(L"Proto\*(R" option (or whatever is valid for your custom \e&handler
.PP
The values are a hashref. In this hashref the keys are the numeric ports and the valuse are a hashref.
.PP
This hashref has only one key \*(L"name\*(R" whose value can be an arbitrary label for your use and once run it sets \*(L"open\*(R" to 1 or 0 and \*(L"note\*(R" to \*(L"\fIbuiltin()\fR\*(R" so you knwo how \*(L"open\*(R" was figured.
.PP
.Vb 10
\&   my %check = (
\&      tcp => {
\&         80 => {
\&            name => \*(AqApache\*(Aq, 
\&         },
\&         443 => {
\&            name => \*(AqSSL Apache\*(Aq,
\&         },
\&      }, 
\&      udp => {
\&         53 => {
\&            name => \*(AqDNS\*(Aq
\&         },
\&         465 => {
\&            name => \*(Aqsmtp tls/ssl\*(Aq
\&         },
\&      },
\&   );
.Ve
.SS "\e&handler"
.IX Subsection "&handler"
Here is an example handler function you can use as a road map:
.PP
.Vb 2
\&    sub handler {
\&       my($ent_hr,$host,$port,$proto,$timeout) = @_;
\&
\&       # use $host, $port, $protocol, and $timeout to determine what you want however you like here
\&
\&       # at a minimum do these two:
\&       $ent_hr\->{open} = ???; # do what you like to set its open status to 1 or 0
\&       $ent_hr\->{note} = \*(Aqmy handler()\*(Aq; 
\&
\&       # set any other info you wanted here also...
\&       if(!$ent_hr\->{open}) {
\&          $ent_hr\->{closed_reason} = ???; # do what you like to set details about why its not open (blocked, not running, etc)
\&       }
\&    }
.Ve
.SH "HOW TO EXPAND ON IO::Socket::PortState"
.IX Header "HOW TO EXPAND ON IO::Socket::PortState"
This module's life came around as a result of wanting to monitor specific ports on several servers, specifically servers running cPanel (<http://cpanel.net/>).
To make it easier to do that and provide a model to make it easier for anyone to create a module that is \*(L"server specific\*(R" I've created IO::Socket::PortState::cPanel
.PP
If you want to do the same thing please use it as a guide, all you would need to do is change the hashrefs and package specific info and voila its all set :)
.PP
If you do use IO::Socket::PortState::cPanel as a model (and I hope you do so that using any IO::Socket::PortState::* module will have a specific consistent use) please reference it in the \s-1POD\s0 of your module as outlined in the \s-1POD\s0 of IO::Socket::PortState::cPanel.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Muey, <http://drmuey.com/cpan_contact.pl>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 by Daniel Muey
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
